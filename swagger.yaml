swagger: '2.0'
info:
  version: 1.0.0
  title: 'Repairs API'
  description: 'REST API for repairs store'
host: api.repairs.com
basePath: /v1
schemes:
  - http
tags:
  - name: auth
    description: all endpoints related to authentication
  - name: repairs
    description: all endpoints related to repairs manipulation
  - name: users
    description: all endpoints related to users manipulation
paths:
  /auth/login:
    post:
      summary: logs the user with username and password
      tags:
        - auth
      parameters:
        - in: body
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        200:
          schema:
            $ref: '#/definitions/Response'
          examples:
            application/json: |-
              {
                'code': 200,
                'error':null,
                'payload': null
              }
          headers:
            Auth-Token:
              type: string
              description: "the auth token which should be added to each request as a header: 'Authorization: {AUTH_TOKEN}'"
  /auth/register:
    post:
      summary: creates new user and logs in
      tags:
        - auth
      parameters:
        - in: body
          required: true
          schema:
            $ref: '#/definitions/UserRegister'
  /repairs:
    get:
      summary: list of repairs
      tags:
        - repairs
      parameters:
        - in: query
          name: from
          type: integer
          required: false
          description: start of range when the repair is scheduled in seconds since January 1st 1970. Inclusive
        - in: query
          name: to
          type: integer
          required: false
          description: end of range when the repair is scheduled in seconds since January 1st 1970. Exclusive
      description: returns list of repairs
      produces:
        - application/json
      responses:
        '200':
          description: repairs list
          schema:
            type: array
            items:
              $ref: '#/definitions/Repair'
    put:
      summary: create new repair
      tags:
        - repairs
      description: 'creates new repair'
      responses:
        '201':
          description: 'successfully created repair'
          examples:
            application/json: |-
              {
                'code': 201,
                'error': null,
                'payload': {
                  'id': 'a93871ca9',
                }
              }
        '400':
          description: 'wrong parameters'
          examples:
            application/json: |-
              {
                'code': 201,
                'error': 'parameter: "startDate" is required and must be an int',
                'payload': null
              }
  '/repairs/{id}':
    get:
      summary: repair details
      tags:
        - repairs
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: id of the repair to get the details for
      responses:
        '200':
          description: a repair details
          schema:
            $ref: '#/definitions/Repair'
        '404':
          description: when repair with given id is not found
          schema:
            $ref: '#/definitions/Response'
          examples:
            application/json: |-
              {
                'code': 404,
                'error': "there is no such repair with given id",
                'payload': null
              }
    post:
      summary: edit repair
      tags:
        - repairs
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: id of the repair to edit
        - in: body
          name: Repair
          required: true
          schema:
            $ref: '#/definitions/Repair'
      responses:
        '200':
          description: repair updated successfully
          schema:
            $ref: '#/definitions/Response'
          examples:
            application/json: |-
              {
                'code': 200,
                'error':null,
                'payload': null
              }
        '404':
          description: when repair with given id is not found
          schema:
            $ref: '#/definitions/Response'
          examples:
            application/json: |-
              {
                'code': 404,
                'error': "there is no such repair with given id",
                'payload': null
              }
        '400':
          description: When body contains invalid values
          schema:
            $ref: '#/definitions/Response'
          examples:
            application/json: |-
              {
                'code': 400,
                'error': "id of the repair in body does not match repair id in path",
                'payload': null
              }
    delete:
      summary: delete repair
      tags:
        - repairs
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: id of the repair to propose completion
  /repairs/{id}/proposeComplete:
    post:
      summary: proposes completion of the repair to be accepted by manager
      tags:
        - repairs
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: id of the repair to propose completion
  /repairs/{id}/markCompleted:
    post:
      summary: accepts the completion proposition made by user with /proposeComplete
      tags:
        - repairs
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: id of the repair to propose completion
  /repairs/{id}/comments:
    get:
      summary: list of comments for given repair
      tags:
        - repairs
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: id of the repair to propose completion
      responses:
        200:
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
    put:
      summary: adds new comment to given repair
      tags:
        - repairs
      parameters:
        - in: body
          name: Comment
          required: true
          schema:
            $ref: '#/definitions/Comment'
  /users:
    get:
      summary: list of users
      tags:
        - users
  /users/search:
    get:
      summary: list usernames matching the search query
      tags:
        - users
      parameters:
        - in: query
          name: q
          required: true
          type: string
          description: A desired query to search users with
  /users/{username}:
    get:
      summary: user details
      tags:
        - users
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: username of the user for which detals we want to fetch
    delete:
      summary: deletes user with given username
      tags:
        - users
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: username of the user for which detals we want to fetch
definitions:
  UserLogin:
    type: object
    required:
      - username
      - passwordHash
    properties:
      username:
        type: string
        description: user's username
      passwordHash:
        type: string
        description: a SHA1 hash of a user's password
  UserRegister:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: user's username
      password:
        type: string
        description: user's password
  Repair:
    allOf:
      - $ref: "#/definitions/NewRepair"
      - required:
        - id
        properties:
          id:
            type: string
  NewRepair:
    type: object
    required:
      - startDate
      - endDate
      - isCompleted
      - completionProposed
      - assignedUser
    properties:
      startDate:
        $ref: '#/definitions/Date'
      endDate:
        $ref: '#/definitions/Date'
      isCompleted:
        type: boolean
        description: 'whether the given repair is assumed completed or not.'
      completionProposed:
        type: boolean
        description: 'used to signal manager or admin that the given repair was proposed for completion status by assigned user'
      assignedUser:
        $ref: '#/definitions/UserSimple'
        description: 'currently assigned user'
  UserSimple:
    type: object
    required:
      - username
      - role
    properties:
      username:
        type: string
      role:
        type: string
  Date:
      type: integer
      format: int64
      description: 'epoch unix timestamp, for example: 1507415004 denotes 7 Oct 2017 22:23:23'
  Response:
    type: object
    properties:
      payload:
        type: object
      error:
        type: string
      code:
        type: integer
  Comment:
    type: object
    properties:
      contents:
        type: string
      date:
        type: integer
      username:
        type: string